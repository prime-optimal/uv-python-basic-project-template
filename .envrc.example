# direnv .envrc generated by setup-direnv
# This file:
#   - Exposes Git metadata
#   - Optionally activates a Python uv venv
#   - Optionally sets up a Bun-based Node.js workspace

# -------------------------
# Git information
# -------------------------
if has git; then
    if git rev-parse --git-dir > /dev/null 2>&1; then
        git_remote=$(git remote get-url origin 2>/dev/null || echo "No remote")
        git_branch=$(git branch --show-current 2>/dev/null || echo "No branch")
        git_commit=$(git rev-parse --short HEAD 2>/dev/null || echo "No commit")

        export GIT_REMOTE="$git_remote"
        export GIT_BRANCH="$git_branch"
        export GIT_COMMIT="$git_commit"

        watch_file "$(git rev-parse --absolute-git-dir)/HEAD"
        watch_file "$(git rev-parse --absolute-git-dir)/refs/remotes/origin/HEAD" 2>/dev/null || true
    fi
fi

# -------------------------
# Python (uv) environment
# -------------------------
layout_uv() {
    local uv_python=${1:-python3}
    [[ $# -gt 0 ]] && shift
    unset PYTHONHOME

    if [ -f .python-version ]; then
        uv_python=$(cat .python-version)
    fi

    if [ ! -d .venv ]; then
        log_status "Creating uv virtual environment with ${uv_python}"
        uv venv
    fi

    export VIRTUAL_ENV="$(pwd)/.venv"
    export UV_ACTIVE=1
    PATH_add "$VIRTUAL_ENV/bin"

    if [ -f pyproject.toml ] && { [ ! -f .venv/pyvenv.cfg ] || [ pyproject.toml -nt .venv/pyvenv.cfg ]; }; then
        log_status "Installing dependencies with uv"
        uv sync
    fi
}

# Auto-activate per project type
if [ -f pyproject.toml ] || [ -f requirements.txt ]; then
    layout_uv
fi

# Load variables from .env if present
if [ -f .env ]; then
    dotenv .env
fi
